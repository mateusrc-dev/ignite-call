// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  // model é pra definir uma entidade
  id         String   @id @default(uuid()) // @id é pra determinar que o campo vai ser o primary key - 'uuid' é pra gerar automaticamente o id
  username   String   @unique // unique é para que não seja permitido carregar username igual
  name       String   
  bio        String?  @db.Text // para ter mais de 191 caracteres
  email      String?  @unique
  avatar_url String?
  created_at DateTime @default(now()) // now é uma função do prisma que vai preencher o campo com o valor atual do registro no banco de dados

  accounts      Account[] // relacionamento com outras entidades - usuário pode ter mais de uma conta...
  sessions      Session[]
  timeIntervals UserTimeInterval[]
  Scheduling    Scheduling[]

  @@map("users") // colocando o nome da tabela
}

model Account {
  id                  String  @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String? @db.Text // para ter mais de 191 caracteres
  access_token        String? @db.Text // para ter mais de 191 caracteres
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text // para ter mais de 191 caracteres
  session_state       String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts") // colocando o nome da tabela
  @@index([user_id])
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions") // colocando o nome da tabela
  @@index([user_id])
}

model UserTimeInterval {
  // cada entrada que tivermos aqui dentro vai ser relacionado a um intervalo de tempo disponível para aquele usuário
  id                    String @id @default(uuid())
  week_day              Int
  time_start_in_minutes Int
  time_end_in_minutes   Int
  user                  User   @relation(fields: [user_id], references: [id]) // para dizer que esse model está relacionado com User
  user_id               String

  @@map("user_time_intervals")
  @@index([user_id])
}

model Scheduling {
  id           String   @id @default(uuid())
  date         DateTime
  name         String
  email        String
  observations String?
  created_at   DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id])
  user_id      String

  @@map("schedulings")
  @@index([user_id])
}